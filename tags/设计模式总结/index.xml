<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>设计模式总结 - 标签 - yakax</title><link>https://yakax.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</link><description>设计模式总结 - 标签 - yakax</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yakax1569@gmail.com (yakax)</managingEditor><webMaster>yakax1569@gmail.com (yakax)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 24 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://yakax.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/" rel="self" type="application/rss+xml"/><item><title>各类设计模式对比与Spring设计模式的总结</title><link>https://yakax.github.io/%E5%90%84%E7%B1%BB%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94%E4%B8%8Espring%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/%E5%90%84%E7%B1%BB%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94%E4%B8%8Espring%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93/</guid><description><![CDATA[<p>{% raw %}</p>
<table>
  <tr>
    <th width=10%>分类</th>
    <th>设计模式</th>
  </tr>
  <tr>
    <td>创建型</td>
    <td>工厂方法模式(Factory Method)、抽象工厂模式(Abstract Factory)、建造者模式(Builder)、原型模式(Prototype)、单例模式(Singleton)</td>
  </tr>
  <tr>
    <td>结构型</td>
    <td>适配器模式(Adapter)、桥接模式(Bridge)、组合模式(Composite)、装饰器模式(Decorator)、门面模式(Facade)、享元模式(Flyweight)、代理模式(Proxy)</td>
  </tr>
  <tr>
    <td>行为型</td>
    <td>解释器模式(Interpreter)、模板方法模式(Template Method)、责任链模式(Chain of Responsibility)、命令模式(Command)、迭代器模式(Iterator)、调解者模式(Mediator)、备忘录模式(Memento)、观察者模式(Observer)、状态模式(State)、策略模式(Strategy)、访问者模式(Visitor)</td>
  </tr>
</table>
{% endraw %}]]></description></item></channel></rss>