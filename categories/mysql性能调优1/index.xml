<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>MySQL性能调优1 - 分类 - yakax</title><link>https://yakax.github.io/categories/mysql%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%981/</link><description>MySQL性能调优1 - 分类 - yakax</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yakax1569@gmail.com (yakax)</managingEditor><webMaster>yakax1569@gmail.com (yakax)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 11 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://yakax.github.io/categories/mysql%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%981/" rel="self" type="application/rss+xml"/><item><title>MySQL性能调优(5)Innodb引擎的MVCC</title><link>https://yakax.github.io/mysql%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%985innodb%E5%BC%95%E6%93%8E%E7%9A%84mvcc/</link><pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/mysql%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%985innodb%E5%BC%95%E6%93%8E%E7%9A%84mvcc/</guid><description><![CDATA[<h4 id="mvcc">MVCC</h4>
<p><font color=red>Multiversion concurrency control (多版本并发控制)
并发访问(读或写)数据库时，对正在事务内处理的数据做多版本的管理。以达到用来避免写操作的堵塞，从而引发读操作的并发问题。</font>
这里看一个案例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">begin
// 这里默认是加上X锁的，在未做commit/rollback操作之前
update users set lastUpdate=now() where id =1; 
// 在其他的事务我们能不能进行对应数据的查询 但是我这时查询是能查到的当前时间这条记录
select * from users where id = 1;
</code></pre></td></tr></table>
</div>
</div><p>先来看看MVCC的处理机制</p>]]></description></item></channel></rss>