<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>高并发 - 标签 - yakax</title><link>https://yakax.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/</link><description>高并发 - 标签 - yakax</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yakax1569@gmail.com (yakax)</managingEditor><webMaster>yakax1569@gmail.com (yakax)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 08 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://yakax.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/" rel="self" type="application/rss+xml"/><item><title>谈谈Java多线程与高并发</title><link>https://yakax.github.io/%E8%B0%88%E8%B0%88java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/</link><pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/%E8%B0%88%E8%B0%88java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91/</guid><description><![CDATA[<h4 id="目前我接触的多线程编程基本上都是基于javautilconcurrent-这个包下的开发的下面就以这个包来分析java的多线程与高并发">目前我接触的多线程编程基本上都是基于java.util.concurrent 这个包下的开发的，下面就以这个包来分析Java的多线程与高并发</h4>
<h4 id="分析面试题">分析面试题</h4>
<ol>
<li>在java中wait和sleep方法的不同？</li>
</ol>
<blockquote>
<p>最大的不同是在等待时wait会释放锁，而sleep一直持有锁。Wait通常被用于线程间交互，sleep通常被用于暂停执行。</p>
</blockquote>
<ol start="2">
<li>创建多线程的三种方法</li>
</ol>
<blockquote>
<p>1.继承Thread()
2.实现Runnable()接口
3.实现Callable接口</p>
</blockquote>
<ol start="3">
<li>继承Thread与实现Runnable区别</li>
</ol>
<blockquote>
<p>类可能只要求可执行即可,因此继承整个Thread类的开销过大</p>
</blockquote>
<ol start="4">
<li>Runnable和Callable的区别</li>
</ol>
<blockquote>
<p>Runnable接口中的run()方法的返回值是void;而Callable接口中的call()方法是有返回值的,和Future/FutureTask配合可以用来获取异步执行的结果。</p>
</blockquote>
<ol start="5">
<li>notify作用</li>
</ol>
<blockquote>
<p>1.notify：唤醒一个正在wait当前对象锁的线程，并让它拿到对象锁
2.notifyAll：唤醒所有正在wait前对象锁的线程
3.在调用wait，notify，notifyall的时候当前线程必须获得这个对象的锁。</p>
</blockquote>
<ol start="6">
<li>线程的5种状态
<a data-fancybox="gallery" href="https://yakax.oss-cn-hangzhou.aliyuncs.com/blog/2018-11-5/8.png">
    
</a></li>
</ol>]]></description></item></channel></rss>