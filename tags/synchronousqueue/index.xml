<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>SynchronousQueue - 标签 - yakax</title><link>https://yakax.gitee.io/tags/synchronousqueue/</link><description>SynchronousQueue - 标签 - yakax</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yakax1569@gmail.com (yakax)</managingEditor><webMaster>yakax1569@gmail.com (yakax)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 22 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yakax.gitee.io/tags/synchronousqueue/" rel="self" type="application/rss+xml"/><item><title>SynchronousQueue</title><link>https://yakax.gitee.io/synchronousqueue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.gitee.io/synchronousqueue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</guid><description><![CDATA[<blockquote>
<p>SynchronousQueue 是实现了BlockingQueue的一个队列。特点是SynchronousQueue 没有容器。</p>
<p>在生产者消费者情况下。生产者生产数据后<strong>没人消费是会阻塞的</strong>。当有消费者消费了，消费者与生产者同时退出队列。</p>
</blockquote>
<h2 id="synchronousqueue-的两种实现方式">SynchronousQueue 的两种实现方式</h2>
<ul>
<li>公平模式 就是队列 <strong>TransferQueue</strong></li>
<li>非公平模式 就是栈  <strong>TransferStack</strong></li>
</ul>]]></description></item></channel></rss>