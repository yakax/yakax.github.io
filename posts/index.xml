<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - yakax</title><link>https://yakax.github.io/posts/</link><description>所有文章 | yakax</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yakax1569@gmail.com (yakax)</managingEditor><webMaster>yakax1569@gmail.com (yakax)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 29 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://yakax.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>LongAdder学习</title><link>https://yakax.github.io/longadder%E5%AD%A6%E4%B9%A0/</link><pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/longadder%E5%AD%A6%E4%B9%A0/</guid><description>&lt;p>&lt;/p></description></item><item><title>HashMap 常见问题Java8</title><link>https://yakax.github.io/hashmap-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98java8/</link><pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/hashmap-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98java8/</guid><description><![CDATA[<h3 id="hashmap并发修改异常或者循环时删除异常">HashMap并发修改异常,或者循环时删除异常</h3>
<p><code>ConcurrentModificationException</code>基本都是modCount修改后与原modCount不相等而暴露的异常。很多集合都会有这个问题</p>
<p>编写者抛这个异常的是想 快速失败，暴露异常。让开发者自己解决</p>]]></description></item><item><title>JVM调优学习之旅-(1)类加载与垃圾回收</title><link>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-1%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-1%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid><description><![CDATA[<h3 id="类加载过程">类加载过程</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">A</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">A</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>JVM调优学习之旅-(2)ParNew+CMS</title><link>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-2parnew-cms/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-2parnew-cms/</guid><description><![CDATA[<h2 id="parnew">ParNew</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Serial 与 Serial  old  单线程的就先不分析学习了
</code></pre></td></tr></table>
</div>
</div><h4 id="到底什么时候会尝试触发minor-gc">到底什么时候会尝试触发Minor GC</h4>
<p>一般年轻代内部内存比例是8:1:1</p>
<p>当Eden区满了会触发minor gc把活下来的对象放入剩余的s区中。</p>]]></description></item><item><title>JVM调优学习之旅-(3)ParNew+CMS 案例模拟实战</title><link>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-3parnew-cms-%E6%A1%88%E4%BE%8B%E6%A8%A1%E6%8B%9F%E5%AE%9E%E6%88%98/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-3parnew-cms-%E6%A1%88%E4%BE%8B%E6%A8%A1%E6%8B%9F%E5%AE%9E%E6%88%98/</guid><description><![CDATA[<h4 id="场景">场景</h4>
<p>500万日活用户，每个用户平均访问20来次的一个系统，按10%的付费转化率来计算，每天应该产生50万订单，50万订单一般集中在4小时，平均下来每秒几十个订单。</p>
<p>当在高峰期的时候每秒有1000个下单请求：按3台机器算，每台机器抗300个请求左右。机器4核8G。</p>]]></description></item><item><title>JVM调优学习之旅-(4)G1</title><link>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-4g1/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-4g1/</guid><description><![CDATA[<h3 id="g1垃圾回收器介绍">G1垃圾回收器介绍</h3>
<blockquote>
<p>G1垃圾回收器在我们设置堆内存大小后，JVM启动在默认情况下把堆内存拆分为大小均等的region具体大小是&mdash;堆内存/2048。region大小是2的倍数。</p>
</blockquote>
<p>可以通过 <strong>“-XX:G1HeapRegionSize”</strong> 设置region大小。</p>
<p>region 数量是动态的。初始的时候新生代region只有5%,会随着新生代增加region跟着增加。 垃圾回收后也会减少。默认新生代的占比不会超过60%，可以通过**“- XX:G1MaxNewSizePercent”**设置</p>
<p></p>]]></description></item><item><title>JVM调优学习之旅-(5)初识gc日志 ParNew+CMS</title><link>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-5%E5%88%9D%E8%AF%86gc%E6%97%A5%E5%BF%97-parnew-cms/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-5%E5%88%9D%E8%AF%86gc%E6%97%A5%E5%BF%97-parnew-cms/</guid><description><![CDATA[<h2 id="模拟gc">模拟GC</h2>
<h3 id="jvm参数">JVM参数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="o">-</span><span class="n">XX</span><span class="o">:</span><span class="n">NewSize</span><span class="o">=</span><span class="n">5242880</span> <span class="o">-</span><span class="n">XX</span><span class="o">:</span><span class="n">MaxNewSize</span><span class="o">=</span><span class="n">5242880</span> <span class="o">-</span><span class="n">XX</span><span class="o">:</span><span class="n">SurvivorRatio</span><span class="o">=</span><span class="n">8</span> 
<span class="o">-</span><span class="n">XX</span><span class="o">:</span><span class="n">InitialHeapSize</span><span class="o">=</span><span class="n">10485760</span> <span class="o">-</span><span class="n">XX</span><span class="o">:</span><span class="n">MaxHeapSize</span><span class="o">=</span><span class="n">10485760</span> 
<span class="o">-</span><span class="n">XX</span><span class="o">:</span><span class="n">PretenureSizeThreshold</span><span class="o">=</span><span class="n">10485760</span> 
<span class="o">-</span><span class="n">XX</span><span class="o">:+</span><span class="n">UseParNewGC</span> <span class="o">-</span><span class="n">XX</span><span class="o">:+</span><span class="n">UseConcMarkSweepGC</span> 
<span class="o">-</span><span class="n">XX</span><span class="o">:+</span><span class="n">PrintGCDetails</span> <span class="o">-</span><span class="n">XX</span><span class="o">:+</span><span class="n">PrintGCTimeStamps</span> <span class="o">-</span><span class="n">Xloggc</span><span class="o">:</span><span class="n">gc</span><span class="o">.</span><span class="na">log</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>JVM调优学习之旅-(6)分析工具使用</title><link>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-6%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-6%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid><description><![CDATA[<h2 id="工具介绍">工具介绍</h2>
<h3 id="jstat">jstat</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">jstat -gc PID
参数说明：
S0C：这是From Survivor区的大小
S1C：这是To Survivor区的大小
S0U：这是From Survivor区当前使用的内存大小
S1U：这是To Survivor区当前使用的内存大小
EC：这是Eden区的大小
EU：这是Eden区当前使用的内存大小
OC：这是老年代的大小
OU：这是老年代当前使用的内存大小
MC：这是方法区（永久代、元数据区）的大小
MU：这是方法区（永久代、元数据区）的当前使用的内存大小
YGC：这是系统运行迄今为止的Young GC次数
YGCT：这是Young GC的耗时
FGC：这是系统运行迄今为止的Full GC次数
FGCT：这是Full GC的耗时
GCT：这是所有GC的总耗时
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>JVM调优学习之旅-(7)P+CMS模拟案例优化分析思想-每秒十万的QPS社交</title><link>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-7p-cms%E6%A8%A1%E6%8B%9F%E6%A1%88%E4%BE%8B%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90%E6%80%9D%E6%83%B3-%E6%AF%8F%E7%A7%92%E5%8D%81%E4%B8%87%E7%9A%84qps%E7%A4%BE%E4%BA%A4/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-7p-cms%E6%A8%A1%E6%8B%9F%E6%A1%88%E4%BE%8B%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90%E6%80%9D%E6%83%B3-%E6%AF%8F%E7%A7%92%E5%8D%81%E4%B8%87%E7%9A%84qps%E7%A4%BE%E4%BA%A4/</guid><description><![CDATA[<h3 id="模拟案例背景">模拟案例背景</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">很多社交APP,日活百万用户，在晚高峰时，QPS很高。
而流量最大的模块，无非就是陌生人的个人主页，类似朋友圈之类的功能。
我们都知道一般这种肯定设置的是缓存，但是问题是这些数据都是比较大的，比如一个人发布了一些感悟，等等之类的。
这些数据都是比较大的。个人信息页展示的信息也是比较完全的。这些数据我们先预估5M.
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>JVM调优学习之旅-(8)P+CMS案例优化分析记录与优化总结</title><link>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-8p-cms%E6%A1%88%E4%BE%8B%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/jvm%E8%B0%83%E4%BC%98%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-8p-cms%E6%A1%88%E4%BE%8B%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</guid><description><![CDATA[<h2 id="参数案例">参数案例</h2>
<h3 id="案例1-线上频繁metadata-gc">案例1-线上频繁Metadata GC</h3>
<p>错误参数 -XX:SoftRefLRUPolicyMSPerMB=0</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">由于参数设置错误，导致线上gc日志  
【Full GC（Metadata GC Threshold）xxxxx, xxxxx】
频繁清空元数据区，而这个区是存放一些加载类的信息的。
通过jstat，或者其他可视化工具
看起来Metaspace区域的内存呈现一个波动的状态，他总是会先不断增加，达到一个顶点之后，
就会把Metaspace区域给占满，然后自然就会触发一次Full GC，Full GC会带着Metaspace区域的垃圾回收，
所以接下来Metaspace区域的内存占用又变得很小了。
</code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>