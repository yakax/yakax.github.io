<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Redis - 分类 - yakax</title><link>https://yakax.github.io/categories/redis/</link><description>Redis - 分类 - yakax</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yakax1569@gmail.com (yakax)</managingEditor><webMaster>yakax1569@gmail.com (yakax)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 26 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://yakax.github.io/categories/redis/" rel="self" type="application/rss+xml"/><item><title>总结Redis问题</title><link>https://yakax.github.io/%E6%80%BB%E7%BB%93redis%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/%E6%80%BB%E7%BB%93redis%E9%97%AE%E9%A2%98/</guid><description><![CDATA[<h3 id="redis-线程模型">Redis 线程模型</h3>
<p><a data-fancybox="gallery" href="https://yakax.oss-cn-hangzhou.aliyuncs.com/blog/mstuji/redis/TIM%E6%88%AA%E5%9B%BE20200517224409.png">
    
</a></p>]]></description></item><item><title>Redis学习(4)-慢查询分析与RESP协议</title><link>https://yakax.github.io/redis%E5%AD%A6%E4%B9%A04-%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90%E4%B8%8Eresp%E5%8D%8F%E8%AE%AE/</link><pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/redis%E5%AD%A6%E4%B9%A04-%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90%E4%B8%8Eresp%E5%8D%8F%E8%AE%AE/</guid><description><![CDATA[<h3 id="慢查询">慢查询</h3>
<h4 id="redis慢查询分析">Redis慢查询分析</h4>
<p>与MySQL一样:当执行时间超过极大值时，会将发生时间、耗时、 命令记录；</p>
<p><a data-fancybox="gallery" href="https://yakax.oss-cn-hangzhou.aliyuncs.com/blog/redis-2019-926/10.png">
    
</a></p>
<p>redis命令生命周期：发送 排队 执行 返回,慢查询只统计<strong>第3个</strong>执行步骤的时间</p>
<h4 id="redis如何设置">Redis如何设置</h4>
<ol>
<li>
<p>动态设置6379:&gt; config set slowlog-log-slower-than 10000  //10毫秒
使用config set完后,若想将配置持久化保存到redis.conf，要执行config rewrite ;前提是你根据redis.conf 执行</p>
</li>
<li>
<p>redis.conf修改：找到slowlog-log-slower-than 10000 ，修改保存即可
注意：slowlog-log-slower-than =0记录所有命令 -1命令都不记录</p>
</li>
</ol>]]></description></item><item><title>Redis学习(2)-缓存击穿、穿透、雪崩、热点数据</title><link>https://yakax.github.io/redis%E5%AD%A6%E4%B9%A02-%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E7%A9%BF%E9%80%8F%E9%9B%AA%E5%B4%A9%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE/</link><pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/redis%E5%AD%A6%E4%B9%A02-%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E7%A9%BF%E9%80%8F%E9%9B%AA%E5%B4%A9%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE/</guid><description><![CDATA[<p>设计一个缓存系统，不得不要考虑的问题就是：缓存穿透、缓存击穿与失效时的雪崩效应。
这里不涉及一级缓存还是二级缓存，主要是讲述使用缓存的时候可能会遇到的一些问题以及一些解决办法
我们使用缓存的时候流程一般是这样：
<a data-fancybox="gallery" href="https://yakax.oss-cn-hangzhou.aliyuncs.com/blog/redis-2019-926/4.png">
    
</a>
当我们查询一条数据时，先去查询缓存，如果缓存有就直接返回，如果没有就去查询数据库，然后返回并缓存。
<font color=red>这种情况下就可能会出现一些现象。</font></p>]]></description></item><item><title>Redis学习(3)-使用场景</title><link>https://yakax.github.io/redis%E5%AD%A6%E4%B9%A03-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</link><pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/redis%E5%AD%A6%E4%B9%A03-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</guid><description><![CDATA[<h4 id="redis的常用数据类型">Redis的常用数据类型</h4>
<p><a data-fancybox="gallery" href="https://yakax.oss-cn-hangzhou.aliyuncs.com/blog/redis-2019-926/7.png">
    
</a></p>]]></description></item><item><title>Redis学习(1)-基本命令与持久化机制</title><link>https://yakax.github.io/redis%E5%AD%A6%E4%B9%A01-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</link><pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/redis%E5%AD%A6%E4%B9%A01-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</guid><description><![CDATA[<h3 id="docker简单安装设置密码并开启持久化">docker简单安装设置密码并开启持久化</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker run -d --name myredis -p 6379:6379 redis --requirepass &#34;156967&#34; --appendonly yes
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="文档">文档</h3>
<p><a href="http://redisdoc.com/" target="_blank" rel="noopener noreffer">文档学习</a></p>
<h3 id="特性">特性</h3>
<ol>
<li>速度快
<strong>数据放内存中是速度快的主要原因、C语言实现，与操作系统距离近、使用了单线程架构，预防多线程可能产生的竞争问题</strong></li>
<li>丰富的功能：value可以为string、hash、list、set、zset等多种数据结构，可以满足很多应用场景。还提供了键过期，发布订阅，事务，流水线。(流水线: Redis 的流水线功能允许客户端一次将多个命令请求发送给服务器， 并将被执行的多个命令请求的结果在一个命令回复中全部返回给客户端， 使用这个功能可以有效地减少客户端在执行多个命令时需要与服务器进行通信的次数)</li>
<li>高可用和分布式：哨兵机制实现高可用，保证redis节点故障发现和自动转移</li>
<li>键值对的数据结构服务器</li>
<li>持久化：发生断电或机器故障，数据可能会丢失，可以持久化到硬盘通过(aof、rdb)</li>
<li>主从复制：实现多个相同数据的redis副本</li>
</ol>]]></description></item></channel></rss>