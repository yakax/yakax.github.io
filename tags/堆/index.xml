<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>堆 - 标签 - yakax</title><link>https://yakax.gitee.io/tags/%E5%A0%86/</link><description>堆 - 标签 - yakax</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yakax1569@gmail.com (yakax)</managingEditor><webMaster>yakax1569@gmail.com (yakax)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 05 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://yakax.gitee.io/tags/%E5%A0%86/" rel="self" type="application/rss+xml"/><item><title>谈谈对JVM内存分配</title><link>https://yakax.gitee.io/%E8%B0%88%E8%B0%88%E5%AF%B9jvm%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.gitee.io/%E8%B0%88%E8%B0%88%E5%AF%B9jvm%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid><description><![CDATA[<p><strong>JVM的分区可分为三个：堆（heap）、栈（stack）和方法区（method）：堆主要用来存放对象的，栈主要是用来执行程序的</strong></p>
<h4 id="堆区">堆区</h4>
<ol>
<li>存储的是对象，并且JVM只有一个堆区，被所有线程共享。</li>
<li>比如new string等等对象</li>
<li>由于要在运行时动态分配内存，存取速度较慢</li>
<li>先进先出</li>
</ol>
<h4 id="栈区">栈区</h4>
<ol>
<li>每个线程包含自己的一个栈区，栈中只保存基本数据类型的对象和自定义对象的<strong>引用</strong>记住是引用地址，指向堆中的对象</li>
<li>栈与栈之间不能直接访问</li>
<li>存取速度快，但是生命周期是固定的区域。</li>
<li>先进后出</li>
</ol>
<blockquote>
<p>栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同时定义：
int a = 3;
int b = 3；
编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找栈中是否有3这个值，如果没找到，就将3存放进来，然后将a指向3。接着处理int b = 3；在创建完b的引用变量后，因为在栈中已经有3这个值，便将b直接指向3。这样，就出现了a与b同时均指向3的情况。</p>
</blockquote>]]></description></item></channel></rss>