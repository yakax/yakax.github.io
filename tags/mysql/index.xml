<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>MySQL - 标签 - yakax</title><link>https://yakax.github.io/tags/mysql/</link><description>MySQL - 标签 - yakax</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yakax1569@gmail.com (yakax)</managingEditor><webMaster>yakax1569@gmail.com (yakax)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 20 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yakax.github.io/tags/mysql/" rel="self" type="application/rss+xml"/><item><title>MySQL-Buffer Pool 学习</title><link>https://yakax.github.io/mysql-buffer-pool-%E5%AD%A6%E4%B9%A0-copy/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/mysql-buffer-pool-%E5%AD%A6%E4%B9%A0-copy/</guid><description><![CDATA[<h4 id="一条sql执行基本流程">一条sql执行基本流程</h4>
<p></p>
<blockquote>
<p>在老版本的MySQL中sql通过连接进来时会有查询缓存这一块的逻辑。</p>
<p>查询解析器解析sql 是否正确后，然后基本优化sql，生成执行计划，选择引擎执行。</p>
<p>而InnoDB 在执行时 为了保证对数据的执行更快，省去磁盘IO开销 引入了Buffer Pool</p>
</blockquote>]]></description></item><item><title>MySQL-Explain学习</title><link>https://yakax.github.io/mysql-explain%E5%AD%A6%E4%B9%A0/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/mysql-explain%E5%AD%A6%E4%B9%A0/</guid><description>&lt;h2 id="执行计划各列详解">执行计划各列详解&lt;/h2>
&lt;p>&lt;/p></description></item><item><title>MySQL-一些问题</title><link>https://yakax.github.io/mysql-%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/mysql-%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid><description><![CDATA[<h4 id="优化器未使用你想用的索引">优化器未使用你想用的索引</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t</span> <span class="k">force</span> <span class="k">index</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">where</span> <span class="n">a</span> <span class="k">between</span> <span class="mi">10000</span> <span class="k">and</span> <span class="mi">20000</span><span class="p">;</span>
<span class="o">//</span> <span class="err">利用参数</span><span class="n">force</span> <span class="k">index</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>MySQL-事务学习</title><link>https://yakax.github.io/mysql-%E4%BA%8B%E5%8A%A1%E5%AD%A6%E4%B9%A0/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/mysql-%E4%BA%8B%E5%8A%A1%E5%AD%A6%E4%B9%A0/</guid><description><![CDATA[<h2 id="多事务并发处理数据产生的问题">多事务并发处理数据产生的问题</h2>
<p><strong>脏读脏写 都是因为读取了事务未提交时的事务回滚情况</strong></p>
<h4 id="脏写">脏写</h4>
<p>事务A与事务B同时更新一条数据，由于其中一个事务回滚 导致另外事务执行成功的数据不存在了。</p>
<h4 id="脏读">脏读</h4>
<p>事务A还没提交事务时事务B拿到值做了大量的操作，事务A回滚后出现的数据异常问题。</p>
<h4 id="不可重复读-与可重复读">不可重复读 与可重复读</h4>
<p>事务A修改了值并且提交了事务    B读取到   然后B在执行事务期间 C又修改了值并且提交了。这时B读取到的值又变了。 这就时不可重复读问题。 可重复读就相反 并且读取到的值是相同的。</p>
<h4 id="幻读">幻读</h4>
<p>其实就是在事务执行期间第二次查询相比第一次查询出现了之前没出现过的数据。</p>]]></description></item><item><title>MySQL-成本与统计数据学习</title><link>https://yakax.github.io/mysql-%E6%88%90%E6%9C%AC%E4%B8%8E%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/mysql-%E6%88%90%E6%9C%AC%E4%B8%8E%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0/</guid><description><![CDATA[<blockquote>
<p>MySQL执行一个查询可以有不同的执行方案，它会选择其中成本最低，或者说代价最低的那种方案去真正的执行查询</p>
</blockquote>
<h2 id="基于成本的优化步骤">基于成本的优化步骤</h2>
<ol>
<li>根据搜索条件，找出所有可能使用的索引</li>
<li>计算全表扫描的代价</li>
<li>计算使用不同索引执行查询的代价</li>
<li>对比各种执行方案的代价，找出成本最低的那一个</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="nf">single_table</span> <span class="p">(</span>
    <span class="n">id</span> <span class="kt">INT</span> <span class="k">NOT</span> <span class="no">NULL</span> <span class="kp">AUTO_INCREMENT</span><span class="p">,</span>
    <span class="n">key1</span> <span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span>
    <span class="n">key2</span> <span class="kt">INT</span><span class="p">,</span>
    <span class="n">key3</span> <span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span>
    <span class="n">key_part1</span> <span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span>
    <span class="n">key_part2</span> <span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span>
    <span class="n">key_part3</span> <span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span>
    <span class="n">common_field</span> <span class="kt">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span>
    <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">id</span><span class="p">),</span>
    <span class="k">KEY</span> <span class="nf">idx_key1</span> <span class="p">(</span><span class="n">key1</span><span class="p">),</span>
    <span class="k">UNIQUE</span> <span class="k">KEY</span> <span class="nf">idx_key2</span> <span class="p">(</span><span class="n">key2</span><span class="p">),</span>
    <span class="k">KEY</span> <span class="nf">idx_key3</span> <span class="p">(</span><span class="n">key3</span><span class="p">),</span>
    <span class="k">KEY</span> <span class="nf">idx_key_part</span><span class="p">(</span><span class="n">key_part1</span><span class="p">,</span> <span class="n">key_part2</span><span class="p">,</span> <span class="n">key_part3</span><span class="p">)</span>
<span class="p">)</span> <span class="kp">Engine</span><span class="o">=</span><span class="n">InnoDB</span> <span class="kp">CHARSET</span><span class="o">=</span><span class="n">utf8</span><span class="p">;</span>
<span class="c1">## 执行sql语句
</span><span class="c1"></span><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">single_table</span> <span class="k">WHERE</span> 
    <span class="n">key1</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">)</span> <span class="k">AND</span> 
    <span class="n">key2</span> <span class="o">&gt;</span> <span class="mi">10</span> <span class="k">AND</span> <span class="n">key2</span> <span class="o">&lt;</span> <span class="mi">1000</span> <span class="k">AND</span> 
    <span class="n">key3</span> <span class="o">&gt;</span> <span class="n">key2</span> <span class="k">AND</span> 
    <span class="n">key_part1</span> <span class="k">LIKE</span> <span class="s1">&#39;%hello%&#39;</span> <span class="k">AND</span>
    <span class="n">common_field</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span><span class="p">;</span>
<span class="c1">## possible keys只有idx_key1和idx_key2。
</span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>MySQL-日志学习</title><link>https://yakax.github.io/mysql-%E6%97%A5%E5%BF%97%E5%AD%A6%E4%B9%A0/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/mysql-%E6%97%A5%E5%BF%97%E5%AD%A6%E4%B9%A0/</guid><description><![CDATA[<h2 id="更新语句的基本流程">更新语句的基本流程</h2>
<p></p>
<ol>
<li>更新数据前 会把数据写入uodo 日志文件</li>
<li>更新数据后 会把数据写入redo缓冲池，这意味着这个缓冲池落地磁盘，跟事务有关系，可以通过<code>innodb_flush_log_at_trx_commit </code>配置。</li>
<li>当参数是1时，就是必须把redo log写入磁盘才能提交事务。0 的时候就是不会有redo日志、2 的时候是先写oscache  这两种都有丢失数据的风险</li>
<li>buffer pool就是我们一直在操作的数据的缓冲区。</li>
<li>redo log 文件里面也是一块一块追加在一起的</li>
</ol>]]></description></item><item><title>MySQL-查询-SQL简化与子查询的物化</title><link>https://yakax.github.io/mysql-%E6%9F%A5%E8%AF%A2-sql%E7%AE%80%E5%8C%96%E4%B8%8E%E5%AD%90%E6%9F%A5%E8%AF%A2%E7%9A%84%E7%89%A9%E5%8C%96/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/mysql-%E6%9F%A5%E8%AF%A2-sql%E7%AE%80%E5%8C%96%E4%B8%8E%E5%AD%90%E6%9F%A5%E8%AF%A2%E7%9A%84%E7%89%A9%E5%8C%96/</guid><description><![CDATA[<h2 id="条件化简">条件化简</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="c1">## 移除不必要的括号
</span><span class="c1"></span><span class="p">((</span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="k">AND</span> <span class="n">b</span> <span class="o">=</span> <span class="n">c</span><span class="p">)</span> <span class="k">OR</span> <span class="p">((</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">c</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">)))</span> <span class="err">改</span> <span class="p">(</span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="k">and</span> <span class="n">b</span> <span class="o">=</span> <span class="n">c</span><span class="p">)</span> <span class="k">OR</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">c</span> <span class="k">AND</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">)</span>
<span class="c1">## 常量传递（constant_propagation）
</span><span class="c1"></span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="k">AND</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="n">a</span>  <span class="err">改</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="k">AND</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="mi">5</span>
<span class="c1">## 移除没用的条件（trivial_condition_removal）
</span><span class="c1"></span><span class="p">(</span><span class="n">a</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="k">and</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">)</span> <span class="k">OR</span> <span class="p">(</span><span class="n">a</span> <span class="o">=</span> <span class="mi">6</span> <span class="k">OR</span> <span class="mi">5</span> <span class="o">!=</span> <span class="mi">5</span><span class="p">)</span>
<span class="err">很明显，</span><span class="n">b</span> <span class="o">=</span> <span class="n">b这个表达式永远为TRUE</span><span class="err">，</span><span class="mi">5</span> <span class="o">!=</span> <span class="mi">5</span><span class="err">这个表达式永远为</span><span class="no">FALSE</span><span class="err">，所以简化后的表达式就是这样的：</span>
<span class="n">a</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="k">OR</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">6</span>
<span class="c1">## 表达式计算 
</span><span class="c1"></span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">1</span> <span class="err">改成</span> <span class="n">a</span><span class="o">=</span><span class="mi">6</span> <span class="err">表达式不会对带有符号或者函数的进行化简</span><span class="p">,</span><span class="err">只有搜索条件中索引列和常数使用某些运算符连接起来才可能使用到索引</span>
<span class="c1">##HAVING子句和WHERE子句的合并
</span><span class="c1"></span><span class="err">如果查询语句中没有出现诸如</span><span class="n">SUM</span><span class="err">、</span><span class="n">MAX等等的聚集函数以及GROUP</span> <span class="n">BY子句</span><span class="err">，优化器就把</span><span class="n">HAVING子句和WHERE子句合并起来</span><span class="err">。</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>MySQL-索引-索引合并学习</title><link>https://yakax.github.io/mysql-%E7%B4%A2%E5%BC%95-%E7%B4%A2%E5%BC%95%E5%90%88%E5%B9%B6%E5%AD%A6%E4%B9%A0/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/mysql-%E7%B4%A2%E5%BC%95-%E7%B4%A2%E5%BC%95%E5%90%88%E5%B9%B6%E5%AD%A6%E4%B9%A0/</guid><description><![CDATA[<blockquote>
<p>MySQL在一般情况下执行一个查询时最多只会用到单个二级索引，但是，在这些特殊情况下也可能在一个查询中使用到多个二级索引，设计MySQL的把这种使用到多个索引来完成一次查询的执行方法称之为：index merge</p>
</blockquote>
<p><strong><font color=red >所有的索引合并往往还是需要看数据回表的数量与 mysql 的优化器！优化器只有在单独根据搜索条件从某个二级索引中
获取的记录数比较少，通过Union索引合并后进行访问的代价比全表扫描更小时才会使用Union索引合并</font></strong></p>]]></description></item><item><title>MySQL-索引基本学习</title><link>https://yakax.github.io/mysql-%E7%B4%A2%E5%BC%95%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/mysql-%E7%B4%A2%E5%BC%95%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/</guid><description><![CDATA[<h2 id="innodb索引结构">InnoDB索引结构</h2>
<p></p>
<ul>
<li>每个页里面有最大和最小记录标识record_type=2,3</li>
<li>record_type=1是目录项 0是最终存储记录项</li>
<li>一个页16kb=16384字节 可以存很多记录了基本3层就已经很多条记录了</li>
<li>每个节点的左儿子小于父节点，父节点又小于右儿子</li>
<li><strong>索引每个节点的数据是已经排序好了的，当然如果你是联合索引，那也是排序好了的。</strong></li>
</ul>]]></description></item><item><title>MySQL-连接查询学习</title><link>https://yakax.github.io/mysql-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E5%AD%A6%E4%B9%A0/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.github.io/mysql-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E5%AD%A6%E4%B9%A0/</guid><description><![CDATA[<h2 id="连接查询的基本语法">连接查询的基本语法</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">INNER</span> <span class="k">JOIN</span>  <span class="c1">## 内连接和外连接的根本区别就是在驱动表中的记录不符合ON子句中的连接条件时不会把该记录加入到最后的结果集
</span><span class="c1"></span><span class="k">LEFT</span> <span class="k">JOIN</span>  <span class="c1">## 右边未匹配的null展示
</span><span class="c1"></span><span class="k">RIGHT</span> <span class="k">JOIN</span>   <span class="c1">## 左边未匹配的null展示
</span></code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>