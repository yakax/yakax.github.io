<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>CyclicBarrier - 标签 - yakax</title><link>https://yakax.gitee.io/tags/cyclicbarrier/</link><description>CyclicBarrier - 标签 - yakax</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yakax1569@gmail.com (yakax)</managingEditor><webMaster>yakax1569@gmail.com (yakax)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 22 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yakax.gitee.io/tags/cyclicbarrier/" rel="self" type="application/rss+xml"/><item><title>AQS应用工具类源码学习</title><link>https://yakax.gitee.io/aqs%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.gitee.io/aqs%E5%BA%94%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</guid><description>AQS的共享锁 CountDownLatch 基本结构图 1 基本就是当state值更改为0时就开始唤醒aqs队列第一个节点 然后，就会调用 setHeadAndPropagate 这个方法 唤醒持续唤醒后继节点。 简单</description></item><item><title>并发编程学习(6)CountDownLatch、Semaphore、CyclicBarrier</title><link>https://yakax.gitee.io/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A06countdownlatchsemaphorecyclicbarrier/</link><pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.gitee.io/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A06countdownlatchsemaphorecyclicbarrier/</guid><description><![CDATA[<h3 id="countdownlatch">CountDownLatch</h3>
<p>countdownlatch 是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程的操作执行完毕再执行,countdownlatch 提供了两个方法，一个是 countDown，一个是 await。countdownlatch 初始化的时候需要传入一个整数，在这个整数倒数到 0 之前，调用了 await 方法的程序都必须要等待，然后通过 countDown 来倒数</p>
<h4 id="示例代码">示例代码</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">    public static void main(String[] args) throws InterruptedException {
        CountDownLatch countDownLatch = new CountDownLatch(5);
        new Thread(() -&gt; {
            System.out.println(&#34;Thread1&#34;);
            countDownLatch.countDown(); //3-1=2
            System.out.println(&#34;Thread1执行完毕&#34;);
        }).start();
        new Thread(() -&gt; {
            System.out.println(&#34;Thread2&#34;);
            countDownLatch.countDown();//2-1=1
            System.out.println(&#34;Thread2执行完毕&#34;);
        }).start();
        new Thread(() -&gt; {
            System.out.println(&#34;Thread3&#34;);
            countDownLatch.countDown();//1-1=0
            System.out.println(&#34;Thread3执行完毕&#34;);
        }).start();
        countDownLatch.await();
    }
输出--------------------
Thread1
Thread2
Thread2执行完毕
Thread1执行完毕
Thread3
Thread3执行完毕
-----------不会结束
</code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>