<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Spring - 标签 - yakax</title><link>https://yakax.gitee.io/tags/spring/</link><description>Spring - 标签 - yakax</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yakax1569@gmail.com (yakax)</managingEditor><webMaster>yakax1569@gmail.com (yakax)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 24 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://yakax.gitee.io/tags/spring/" rel="self" type="application/rss+xml"/><item><title>各类设计模式对比与Spring设计模式的总结</title><link>https://yakax.gitee.io/%E5%90%84%E7%B1%BB%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94%E4%B8%8Espring%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.gitee.io/%E5%90%84%E7%B1%BB%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94%E4%B8%8Espring%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93/</guid><description><![CDATA[<p>{% raw %}</p>
<table>
  <tr>
    <th width=10%>分类</th>
    <th>设计模式</th>
  </tr>
  <tr>
    <td>创建型</td>
    <td>工厂方法模式(Factory Method)、抽象工厂模式(Abstract Factory)、建造者模式(Builder)、原型模式(Prototype)、单例模式(Singleton)</td>
  </tr>
  <tr>
    <td>结构型</td>
    <td>适配器模式(Adapter)、桥接模式(Bridge)、组合模式(Composite)、装饰器模式(Decorator)、门面模式(Facade)、享元模式(Flyweight)、代理模式(Proxy)</td>
  </tr>
  <tr>
    <td>行为型</td>
    <td>解释器模式(Interpreter)、模板方法模式(Template Method)、责任链模式(Chain of Responsibility)、命令模式(Command)、迭代器模式(Iterator)、调解者模式(Mediator)、备忘录模式(Memento)、观察者模式(Observer)、状态模式(State)、策略模式(Strategy)、访问者模式(Visitor)</td>
  </tr>
</table>
{% endraw %}]]></description></item><item><title>对SSM的理解</title><link>https://yakax.gitee.io/%E5%AF%B9%E4%BA%8Essm%E7%90%86%E8%A7%A3/</link><pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.gitee.io/%E5%AF%B9%E4%BA%8Essm%E7%90%86%E8%A7%A3/</guid><description><![CDATA[<ul>
<li>MyBatis：持久层框架，负责数据库访问。</li>
<li>Spring MVC：表现层框架，把模型、视图、控制器分离，组合成一个灵活的系统。</li>
<li>Spring： 整合项目的所有框架，管理各种Java Bean（mapper、service、controller），事务控制。</li>
</ul>
<h4 id="spring中的ioc控制反转di依赖注入aop切面">Spring中的IOC（控制反转）、DI（依赖注入）、AOP（切面）</h4>
<ol>
<li>IOC（Spring核心）可以认为是一个生产和管理bean的容器（可以管理bean的生命周期）；在原来需要new对象时，现在不需要了。</li>
<li>DI注入方式有三种</li>
</ol>
<blockquote>
<ul>
<li>set注入（根据属性注入）</li>
<li>构造方法注入</li>
<li>根据接口注入</li>
</ul>
</blockquote>
<ol start="3">
<li>IOC与DI可以理解为：</li>
</ol>
<blockquote>
<p>控制反转是动态的向某个对象提供他所需要的对象，这一点是通过DI依赖注入实现的。</p>
</blockquote>
<ol start="4">
<li>AOP面向切面:是一种编程思想，将程序中的交叉业务逻辑（比如安全，日志，事务等），封装成一个切面,注入到目标对象中。</li>
<li>AOP是通过代理实现的：可以是JDK动态代理，也可以是cglib代理，前者基于接口，后者基于子类。</li>
</ol>]]></description></item></channel></rss>