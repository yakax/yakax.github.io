<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>volatile - 标签 - yakax</title><link>https://yakax.gitee.io/tags/volatile/</link><description>volatile - 标签 - yakax</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yakax1569@gmail.com (yakax)</managingEditor><webMaster>yakax1569@gmail.com (yakax)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 26 Jun 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://yakax.gitee.io/tags/volatile/" rel="self" type="application/rss+xml"/><item><title>并发编程学习(3)线程安全性分析</title><link>https://yakax.gitee.io/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A03%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E5%88%86%E6%9E%90/</link><pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.gitee.io/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A03%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E5%88%86%E6%9E%90/</guid><description><![CDATA[<h3 id="初步认识-volatile">初步认识 Volatile</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">    public /*volatile*/ static boolean stop=false;
    public static void main( String[] args ) throws InterruptedException {
        Thread t1=new Thread(()-&gt;{
            int i=0;
            while(!stop){ 
                i++;
            }
        });
        t1.start();
        Thread.sleep(1000);
        stop=true; //true
    }
</code></pre></td></tr></table>
</div>
</div><ul>
<li>定义一个共享变量 stop</li>
<li>在main线程中创建一个子线程 thread，子线程读取到 stop的值做循环结束的条件</li>
<li>main线程中修改stop的值为 true</li>
<li>当 stop没有增加volatile修饰时，子线程对于主线程的 stop=true的修改是不可见的，这样将导致子线程出现死循环</li>
<li>当 stop增加了volatile修饰时，子线程可以获取到主线程对于 stop=true的值，子线程while循环条件不满足退出循环</li>
</ul>
<p><strong>增加volatile关键字以后，main线程对于共享变量 stop值的更新，对于子线程 thread可见，这就是volatile的作用</strong></p>]]></description></item><item><title>单例设计模式</title><link>https://yakax.gitee.io/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.gitee.io/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description><![CDATA[<h4 id="单例的好处">单例的好处</h4>
<p>单例模式的初衷就是为了使资源能够共享，只需要赋值或者初始化一次，大家都能够重复利用。
一个类Class只有一个实例存在。 使用Singleton的好处还在于可以节省内存，因为它限制了实例的个数，有利于Java垃圾回收；常见的单例有枚举常量类、IOC容器、配置项等等。</p>
<h4 id="普通单例模式-饿汉式">普通单例模式-饿汉式</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">public class Singleton {
    private static Singleton singleton = new Singleton();
    private Singleton() {
    }
    public static Singleton getInstance() {
        return singleton;
    }
}
</code></pre></td></tr></table>
</div>
</div><p>饿汉式单例，就是一个私有的构造方法加一个私有的静态当前类实例对象和一个公有的静态获取实例方法组成由于类实例对象为静态变量，所以在加载类的时候我们就会创建类的实例对象，这样的话比较消耗内存，浪费性能。</p>]]></description></item><item><title>final、static、volatile、synchronized常见面试问题</title><link>https://yakax.gitee.io/final%E4%B8%8Estatic-%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate><author>作者</author><guid>https://yakax.gitee.io/final%E4%B8%8Estatic-%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</guid><description><![CDATA[<p><strong>记住两点 final不可改变 static 静态全局.</strong></p>
<h4 id="finalfinallyfinalize的区别">final、finally、finalize的区别</h4>
<ol>
<li>final 用于声明属性,方法和类, 分别表示属性<strong>不可变</strong>, 方法<strong>不可覆盖</strong>, 类<strong>不可继承</strong>.</li>
<li>finally 是异常处理语句结构的一部分，表示总是执行.</li>
<li>finalize 是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等. JVM不保证此方法总被调用.</li>
</ol>
<h4 id="static关键字">Static关键字</h4>
<blockquote>
<p>static 关键字可以用来修饰类的变量，方法和 <strong>内部类</strong>。static 是静态的意思，也就它定义的东西是全局的意思，属于全局与类相关，不与具体实例相关。就是说它调用的时候，只是<strong>ClassName.method()</strong>,而不是 <strong>new ClassName().method()</strong>。new ClassName()不就是一个对象了吗？static 的变量和方法不可以这样调用的。它不与具体的实例有关。</p>
</blockquote>
<ul>
<li>JAVA类首次装入时，会对静态成员变量或方法进行一次初始化分配内存空间,但方法不被调用是不会执行的。所以静态内部类在调用时才加载分配空间。仔细一想：静态内部类其实和外部类的静态变量，静态方法一样，只要被调用了都会让外部类的被加载。</li>
</ul>]]></description></item></channel></rss>